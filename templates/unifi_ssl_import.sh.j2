#!/bin/bash

# unifi_ssl_import.sh
# UniFi Controller SSL Certificate Import Script for Unix/Linux Systems
# by Steve Jenkins <http://www.stevejenkins.com/>
# Part of https://github.com/stevejenkins/ubnt-linux-utils/
# Incorporates ideas from https://source.sosdg.org/brielle/lets-encrypt-scripts
# Version 2.8
# Last Updated Jan 13, 2017

# REQUIREMENTS
# 1) Assumes you have a UniFi Controller installed and running on your system.
# 2) Assumes you already have a valid 2048-bit private key, signed certificate, and certificate authority
#    chain file. The Controller UI will not work with a 4096-bit certificate. See http://wp.me/p1iGgP-2wU
#    for detailed instructions on how to generate those files and use them with this script.

# KEYSTORE BACKUP
# Even though this script attempts to be clever and careful in how it backs up your existing keystore,
# it's never a bad idea to manually back up your keystore (located at $UNIFI_DIR/data/keystore on RedHat
# systems or /$UNIFI_DIR/keystore on Debian/Ubunty systems) to a separate directory before running this
# script. If anything goes wrong, you can restore from your backup, restart the UniFi Controller service,
# and be back online immediately.

# CONFIGURATION OPTIONS
UNIFI_HOSTNAME={{ unifi_admin_host }}
UNIFI_SERVICE={{ docker_unifi_container_name }}

# Uncomment following three lines for Fedora/RedHat/CentOS
#UNIFI_DIR=/opt/UniFi
#JAVA_DIR=${UNIFI_DIR}
#KEYSTORE=${UNIFI_DIR}/data/keystore

# Uncomment following three lines for Debian/Ubuntu
UNIFI_CONFIG_DIR='{{ unifi_config_directory }}'
UNIFI_DATA_DIR='{{ unifi_data_directory }}'
UNIFI_DIR='{{ unifi_container_data_directory }}'
JAVA_DIR='{{ unifi_container_java_directory }}'
KEYSTORE='keystore'

# Uncomment following three lines for CloudKey
#UNIFI_DIR=/var/lib/unifi
#JAVA_DIR=/usr/lib/unifi
#KEYSTORE=${JAVA_DIR}/data/keystore

# FOR LET'S ENCRYPT SSL CERTIFICATES ONLY
# Generate your Let's Encrtypt key & cert with certbot before running this script
LE_MODE=no
LE_LIVE_DIR=/etc/letsencrypt/live

# THE FOLLOWING OPTIONS NOT REQUIRED IF LE_MODE IS ENABLED
PRIV_KEY="{{ ssl_keypath }}"
SIGNED_CRT="{{ ssl_certpath }}"
#CHAIN_FILE="cert.ca"

# CONFIGURATION OPTIONS YOU PROBABLY SHOULDN'T CHANGE
ALIAS="{{ docker_unifi_container_name }}"
PASSWORD="aircontrolenterprise"

#### SHOULDN'T HAVE TO TOUCH ANYTHING PAST THIS POINT ####

printf "\nStarting UniFi Controller SSL Import...\n"


# Verify required files exist
if [ ! -f ${PRIV_KEY} ] || [ ! -f ${SIGNED_CRT} ]; then
	printf "\nMissing one or more required files. Check your settings.\n"
	exit 1
else
	# Everything looks OK to proceed
	printf "\nImporting the following files:\n"
	printf "Private Key: %s\n" "$PRIV_KEY"
	printf "Signed CRT File: %s\n" "$SIGNED_CRT"
fi

# Create temp files
#P12_TEMP=$(mktemp)
P12_TEMP='keystore.tmp'

# Stop the UniFi Controller
#printf "\nStopping UniFi Controller...\n"
#service ${UNIFI_SERVICE} stop
#docker stop ${UNIFI_SERVICE}

#if [ ${LE_MODE} == "true" ]; then

	# Write a new MD5 checksum based on the updated certificate
#	printf "\nUpdating certificate MD5 checksum...\n"

#	md5sum ${PRIV_KEY} > ${LE_LIVE_DIR}/${UNIFI_HOSTNAME}/privkey.pem.md5

#fi

# Create double-safe keystore backup
if [ -s "${UNIFI_DATA_DIR}/${KEYSTORE}.orig" ]; then
	printf "\nBackup of original keystore exists!\n"
	printf "\nCreating non-destructive backup as keystore.bak...\n"

docker exec -i ${UNIFI_SERVICE} /bin/bash <<EOF
cp "$UNIFI_DIR/$KEYSTORE" "$UNIFI_DIR/$KEYSTORE".bak
exit
EOF
else
docker exec -i ${UNIFI_SERVICE} /bin/bash <<EOF
cp "$UNIFI_DIR/$KEYSTORE" "$UNIFI_DIR/$KEYSTORE".orig
exit
EOF
	printf "\nNo original keystore backup found.\n"
	printf "\nCreating backup as keystore.orig...\n"
fi

# Export your existing SSL key, cert, and CA data to a PKCS12 file
printf "\nExporting SSL certificate and key data into temporary PKCS12 file...\n"

openssl pkcs12 -export -in ${SIGNED_CRT} -inkey ${PRIV_KEY} -out ${UNIFI_DATA_DIR}/${P12_TEMP} -passout pass:${PASSWORD} -name ${ALIAS}

#openssl pkcs12 -export \
#-in ${CHAIN_FILE} \
#-inkey ${PRIV_KEY} \
#-out ${P12_TEMP} -passout pass:${PASSWORD} \
#-name ${ALIAS}

# Delete the previous certificate data from keystore to avoid "already exists" message
printf "\nRemoving previous certificate data from UniFi keystore...\n"
docker exec -i ${UNIFI_SERVICE} /bin/bash <<EOF
"$JAVA_DIR"/bin/keytool -delete -alias "$ALIAS" -keystore "$UNIFI_DIR/$KEYSTORE" -deststorepass "$PASSWORD"
exit
EOF

# Import the temp PKCS12 file into the UniFi keystore
printf "\nImporting SSL certificate into UniFi keystore...\n"
docker exec -i ${UNIFI_SERVICE} /bin/bash <<EOF
"$JAVA_DIR"/bin/keytool -importkeystore \
-srckeystore "$UNIFI_DIR/$P12_TEMP" -srcstoretype PKCS12 \
-srcstorepass "$PASSWORD" \
-destkeystore "$UNIFI_DIR/$KEYSTORE" \
-deststorepass "$PASSWORD" \
-destkeypass "$PASSWORD" \
-alias "$ALIAS" -trustcacerts
EOF

# Clean up temp files
printf "\nRemoving temporary files...\n"
rm -f ${UNIFI_DATA_DIR}/${P12_TEMP}

# Restart the UniFi Controller to pick up the updated keystore
printf "\nRestarting UniFi Controller to apply new Let's Encrypt SSL certificate...\n"
docker restart ${UNIFI_SERVICE}

# That's all, folks!
printf "\nDone!\n"

exit 0
